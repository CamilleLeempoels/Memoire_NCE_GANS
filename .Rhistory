n = 10000
x = rnorm(m, 2, 4)
size_theta = 3
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
ln = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
const_test = optim(
par = c(1,1),
gr = "CG",
control = list(fnscale=-1),
fn = ln
)$par
}
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
ln = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
const_test = optim(
par = c(1,1),
gr = "CG",
control = list(fnscale=-1),
fn = ln
)$par
}
print(const_test)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
ln = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
}
const_test = optim(
par = c(1,1),
gr = "CG",
control = list(fnscale=-1),
fn = ln
)$par
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
ln = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
}
const_test = optim(
par = c(1,1),
gr = "CG",
control = list(fnscale=-1),
fn = ln
)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
ln = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
}
const_test = optim(
par = c(1,1,1),
gr = "CG",
control = list(fnscale=-1),
fn = ln
)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
f_test = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
}
const_test = optim(
par = c(1,1),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
f_test = function(eta1, eta2) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta1) / (pm_barre(x_test, alpha)*exp(eta1) + pm_barre(x_test, psi)*exp(eta2))))
+
sum(log(pm_barre(y_test, psi)*exp(eta2) / (pm_barre(y_test, psi)*exp(eta2) + pm_barre(y_test, alpha)*exp(eta1))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)
print(const_test)
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100, 2, 4)
y_test = rnorm(100, 3, 5)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(1000, 2, 4)
y_test = rnorm(1000, 3, 5)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(10000, 2, 4)
y_test = rnorm(10000, 3, 5)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 3, 5)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 10, 10)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 10, 10)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
print(c(4*sqrt(2*pi), 10*sqrt(2*pi)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 2, 4)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
print(c(4*sqrt(2*pi), 10*sqrt(2*pi)))
# REVERSE LOGISTIC REGRESSION
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 2, 4)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
print(c(4*sqrt(2*pi), 10*sqrt(2*pi)))
# REVERSE LOGISTIC REGRESSION
pm_barre = function(u, theta){
return(exp(-0.5 * ((u - theta[1]) / theta[2]) ** 2))
}
x_test = rnorm(100000, 2, 4)
y_test = rnorm(100000, 2, 4)
f_test = function(eta) {
alpha = c(2,4)
psi = c(3,5)
n1 = length(x_test)
n2 = length(y_test)
return(
sum(log(pm_barre(x_test, alpha)*exp(eta[1]) / (pm_barre(x_test, alpha)*exp(eta[1]) + pm_barre(x_test, psi)*exp(eta[2]))))
+
sum(log(pm_barre(y_test, psi)*exp(eta[2]) / (pm_barre(y_test, psi)*exp(eta[2]) + pm_barre(y_test, alpha)*exp(eta[1]))))
)
}
const_test = optim(
par = c(0,0),
gr = "CG",
control = list(fnscale=-1),
fn = f_test
)$par
print(exp(-const_test + log(0.5)))
update.packages()
library(rlang)
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# METHODE MC MLE
mc_mle(x, n, c(mean(x),sd(x)), pm_barre)
nce = function(x, law_y, params_y, log_pm, log_pn, size_theta, n){
y = do.call(law_y, c(list(n),params_y))
m = length(x)
h = function(u, theta){
return( 1 / (1 + n/m * exp(log_pn(u) - log_pm(u, theta))))
}
J = function(theta){
return( sum(log(h(x, theta))) + sum(log(1 - h(y, theta))) )
}
theta = optim(
par = rep(1, size_theta),
gr = "CG",
control = list(fnscale=-1),
fn = J
)$par
return(c(theta[-size_theta], exp(-theta[size_theta])))
}
pm_barre = function(u, theta){
return(exp(-0.5 * ((u - theta[1]) / theta[2]) ** 2))
}
log_pm = function(u,theta){
return(theta[3] - 1/2 * (u/theta[2] - theta[1]/theta[2]) ** 2)
# theta[1] = mu / theta[2] = sigma / theta[3] = c
}
log_pn_cauchy = function(u){
return(log(dcauchy(u, mean(x), sd(x))))
}
m = 10000
n = 10000
x = rnorm(m, 2, 4)
size_theta = 3
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000)
for (m in M){
x = rnorm(m, 2, 4)
psi = c(mean(x), sd(x))
N = c(1, 10)
for (n in N) {
for (i in 1:2) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
View(df_nce)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
library(ggplot2)
library(reshape)
library(matrixStats)
library(knitr)
library(dplyr)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000)
for (m in M){
x = rnorm(m, 2, 4)
psi = c(mean(x), sd(x))
N = c(1, 10)
for (n in N) {
for (i in 1:10) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000, 100000)
for (m in M){
x = rnorm(m, 2, 4)
psi = c(mean(x), sd(x))
N = c(1, 10)
for (n in N) {
for (i in 1:2) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000, 100000)
for (m in M){
psi = c(mean(x), sd(x))
x = rnorm(m, 2, 4)
N = c(1, 10)
for (n in N) {
for (i in 1:50) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
View(df_nce)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
write.csv(df_nce, "df_nce.csv")
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000, 100000)
for (m in M){
x = rnorm(m, 2, 4)
psi = c(mean(x), sd(x))
N = c(1, 10)
for (n in N) {
for (i in 1:2) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
df_nce = data.frame(matrix(ncol = 5, nrow = 0))
colnames(df_nce) = c("param_1", "param_2", "const", "size_data", "ratio_noise_data")
M = c(1000, 10000, 100000)
for (m in M){
x = rnorm(m, 2, 4)
psi = c(mean(x), sd(x))
N = c(1, 10)
for (n in N) {
for (i in 1:50) {
df_nce[nrow(df_nce) + 1, ] = c(nce(x, rcauchy, psi, log_pm, log_pn_cauchy, size_theta, m*n), m, n)
}
}
}
df_nce$size_data = as.factor(df_nce$size_data)
df_nce$ratio_noise_data = as.factor(df_nce$ratio_noise_data)
View(df_nce)
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
write.csv(df_nce, "df_nce.csv")
ggplot(df_nce, aes(x = param_1, y = param_2, color = size_data, shape = ratio_noise_data)) + geom_point()
ggplot(df_nce, aes(x = size_data, y = const, color = ratio_noise_data)) + geom_point()
ggplot(df_nce, aes(x = ratio_noise_data, y = const, color = size_data)) + geom_point()
ggplot(df_nce, aes(x = ratio_noise_data, y = const, color = size_data)) + geom_point() + geom_lines()
ggplot(df_nce, aes(x = ratio_noise_data, y = const, color = size_data)) + geom_point() + geom_line()
ggplot(df_nce, aes(x = ratio_noise_data, y = const, color = size_data)) + geom_point()
